apiVersion: v1
kind: ConfigMap
metadata:
  name: simple-api-grpc-k6
data:
  test.js: |
    import grpc from 'k6/net/grpc';
    import { check } from 'k6';

    let client = new grpc.Client();

    export let options = {
      stages: [
        { target: 200, duration: '30s' },
        { target: 0, duration: '30s' }
      ]
    };
    export default function () {
      if (__ITER == 0) {
        client.connect('simple-api-grpc.simple:9090', {
          plaintext: true,
          reflect: true
        });
      }
      const response = client.invoke('main.User/GetUser', {
        id: 1
      });
      check(response, {
        'status is OK': (r) => r && r.status === grpc.StatusOK
      });
    }
  k6.yaml: |
    apiVersion: k6.io/v1alpha1
    kind: K6
    metadata:
      name: simple-api-grpc-k6
      namespace: development
    spec:
      parallelism: 1
      separate: false
      script:
        configMap:
          name: simple-api-grpc-k6
          file: test.js
      arguments: -o experimental-prometheus-rw
      starter:
        nodeselector:
          kubernetes.io/arch: amd64
          team: devops
          service: devops-infra
          performance_type: standard
      runner:
        image: docker.io/grafana/k6:1.1.0
        env:
        - name: K6_PROMETHEUS_RW_SERVER_URL
          value: http://prometheus.observability:9090/api/v1/write
        - name: K6_PROMETHEUS_RW_TREND_AS_NATIVE_HISTOGRAM
          value: 'true'
        nodeselector:
          kubernetes.io/arch: amd64
          team: devops
          service: devops-infra
          performance_type: standard
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: simple-api-grpc-k6-execute
spec:
  entrypoint: execute
  podGC:
    strategy: OnPodCompletion
  templates:
  - name: execute
    steps:
    - - name: k6-run
        template: k6-run
  - name: k6-run
    volumes:
    - name: k6-yaml
      configMap:
        name: simple-api-grpc-k6
        items:
        - key: k6.yaml
          path: k6.yaml
    serviceAccountName: argo-workflow
    container:
      image: docker.io/bitnami/kubectl
      command:
      - "/bin/bash"
      - "-c"
      args:
      - "
        kubectl delete --ignore-not-found=true -n development -f /tmp/k6.yaml
        && kubectl apply -n development -f /tmp/k6.yaml
        && sleep 30
        && kubectl logs -f -n development -l app=k6 -l k6_cr=simple-api-grpc-k6 -l runner=true
        "
      workingDir: /tmp
      resources:
        requests:
          memory: 128Mi
          cpu: 50m
      volumeMounts:
      - name: k6-yaml
        mountPath: /tmp/k6.yaml
        subPath: k6.yaml
    nodeSelector:
      kubernetes.io/arch: amd64
      team: devops
      service: devops-infra
      performance_type: standard
