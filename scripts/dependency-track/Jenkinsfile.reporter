library identifier: 'example-pipeline-library', changelog: false

def timestamp = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
def version = timestamp.substring(0, 10).replace('-', '')

def dtrackUrl = 'https://dtrack.example.io'
def bitbucketUrl = 'https://bitbucket.example.io'
def elasticsearchUrl = 'https://....ap-northeast-2.es.amazonaws.com'
def indexPrefix = 'dtrack_projects'

publishBasePipeline /*nodeLabel: 'built-in', */slackChannels: ['#devops_alert'], containers: [], {
    currentBuild.displayName = "#${version}"

    stage('Checkout') {
        deleteDir()
        checkout scm
    }
    stage('Prepare reports') {
        httpRequest httpMode: 'DELETE', validResponseCodes: '100:599', url: "${elasticsearchUrl}/${indexPrefix}-${version}"
        repos = []

        response = httpRequest authentication: '...', url: "${bitbucketUrl}/rest/api/1.0/projects/?limit=100"
        projects = readJSON text: response.content

        projects.values.each { project ->
            response = httpRequest authentication: '...', url: "${bitbucketUrl}/rest/api/1.0/projects/${project.key}/repos/?limit=1000"
            content = readJSON text: response.content

            content.values.each { repo ->
                repos << [
                    '@timestamp': timestamp,
                    team: project.key.toLowerCase(),
                    scm: repo.links.clone.findResult { it.name == 'http' ? it.href : null }
                ]
            }
        }
        withCredentials([string(credentialsId: '...', variable: 'DTRACK_APIKEY')]) {
            customHeaders = [
                [
                    name: 'X-Api-Key',
                    value: "${DTRACK_APIKEY}"
                ]
            ]
            response = httpRequest customHeaders: customHeaders, url: "${dtrackUrl}/api/v1/project?excludeInactive=true&pageSize=5000&pageNumber=1"
            content = readJSON text: response.content
            projects = []
            git_urls = [:]

            content.findAll {
                it.metrics != null
            }.each { project ->
                git_url = git_urls[project.name]

                if (!git_url) {
                    try {
                        git_url = gitRepo git_url: project.name
                    } catch (e) {
                        git_url = project.name
                    }
                    git_urls[project.name] = git_url
                }
                projects << [
                    name: git_url,
                    lastOccurrence: project.metrics.lastOccurrence,
                    vulnerabilities: project.metrics.vulnerabilities,
                    inheritedRiskScore: project.metrics.inheritedRiskScore
                ]
            }
            metrics = projects.groupBy({ project -> project.name })

            repos.findAll {
                metrics[it.scm] != null
            }.each { repo ->
                repo << [
                    vulnerabilities: metrics[repo.scm].max { it.lastOccurrence }.vulnerabilities,
                    score: metrics[repo.scm].max { it.lastOccurrence }.inheritedRiskScore
                ]
            }
        }
        // output = sh returnStdout: true, script: """
        //     grep -Po "<url>\\Khttps://bitbucket.example.io/.*(?=</url>)" /var/jenkins_home/jobs/*/config.xml | awk '{split(\$0,a,"/config.xml:"); print a[2]}' | sort | uniq
        // """
        // urls = output.split('\n')
        urls = publishScms()

        repos.each { repo ->
            repo << [
                publish: urls.contains(repo.scm)
            ]
        }
        writeFile file: "${indexPrefix}-${version}.json", text: repos.collect { '{"index":{}}\n' + groovy.json.JsonOutput.toJson(it) + '\n' }.join('')

        archiveArtifacts artifacts: "${indexPrefix}-${version}.json", onlyIfSuccessful: true
    }
    stage('Publish reports') {
        data = readFile "${indexPrefix}-${version}.json"
        httpRequest acceptType: 'APPLICATION_JSON', contentType: 'APPLICATION_JSON', httpMode: 'POST', requestBody: data, url: "${elasticsearchUrl}/${indexPrefix}-${version}/_bulk"
    }
}